{"version":3,"sources":["component/LoginPanel/LoginPanel.js","App.js","serviceWorker.js","index.js"],"names":["LoginPanel","props","handleChange","event","setState","target","id","value","handleSubmit","console","log","state","fetch","then","res","json","data","preventDefault","responseGoogle","response","imageUrl","profileObj","email","password","this","length","className","rel","href","clientId","render","renderProps","Button","onClick","disabled","variant","size","width","height","xmlns","fill","fillRule","d","buttonText","onSuccess","cookiePolicy","prompt","src","async","defer","Image","roundedCircle","React","Component","navbar","Navbar","expand","Brand","viewBox","version","stroke","strokeWidth","Toggle","aria-controls","Collapse","Nav","Link","App","useState","useEffect","params","Container","Row","Col","md","xs","transform","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6e623bfd.chunk.js","sourcesContent":["import React from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Image from 'react-bootstrap/Image';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './LoginPanel.module.css';\nimport { GoogleLogin } from 'react-google-login';\n\n\nexport default class LoginPanel extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            email:\"\",\n            password:\"\",\n            imageUrl:\"\"\n        };\n    }\n\n    validateForm() {\n        return this.state.email.length > 0 && this.state.password.length > 0;\n      }\n\n      handleChange = event => {\n        this.setState({\n          [event.target.id]: event.target.value\n        });\n      }\n\n      handleSubmit = event => {\n          console.log(this.state);\n          fetch('/dummy_login').then(res => res.json()).then(data => {\n                console.log(data);\n              });\n          event.preventDefault();\n      }\n\n    responseGoogle = (response) => {\n        console.log(response);\n        const imageUrl = response.profileObj.imageUrl;\n        \n        this.setState({\n            imageUrl: imageUrl\n        });\n        console.log(this.state.imageUrl);\n        // window.location.replace('https://google.com')\n    }\n\n\n\n    render() {\n        return(\n            <div>\n\n            \n            <div className=\"Login\">\n                <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/css/font-awesome.min.css\"></link>\n\n            <GoogleLogin\n                clientId=\"154834213059-4v2mfjapm04hciic1t190kokpj070c6f.apps.googleusercontent.com\"\n                render={renderProps => (\n                <Button onClick={renderProps.onClick} disabled={renderProps.disabled} variant=\"light\" size=\"lg\">\n                    Login with <svg width=\"18\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"#000\" fillRule=\"evenodd\"><path d=\"M9 3.48c1.69 0 2.83.73 3.48 1.34l2.54-2.48C13.46.89 11.43 0 9 0 5.48 0 2.44 2.02.96 4.96l2.91 2.26C4.6 5.05 6.62 3.48 9 3.48z\" fill=\"#EA4335\"></path><path d=\"M17.64 9.2c0-.74-.06-1.28-.19-1.84H9v3.34h4.96c-.1.83-.64 2.08-1.84 2.92l2.84 2.2c1.7-1.57 2.68-3.88 2.68-6.62z\" fill=\"#4285F4\"></path><path d=\"M3.88 10.78A5.54 5.54 0 0 1 3.58 9c0-.62.11-1.22.29-1.78L.96 4.96A9.008 9.008 0 0 0 0 9c0 1.45.35 2.82.96 4.04l2.92-2.26z\" fill=\"#FBBC05\"></path><path d=\"M9 18c2.43 0 4.47-.8 5.96-2.18l-2.84-2.2c-.76.53-1.78.9-3.12.9-2.38 0-4.4-1.57-5.12-3.74L.97 13.04C2.45 15.98 5.48 18 9 18z\" fill=\"#34A853\"></path><path fill=\"none\" d=\"M0 0h18v18H0z\"></path></g></svg>\n                </Button>\n                )}\n                buttonText=\"Login\"\n                onSuccess={this.responseGoogle}\n                // onFailure={this.responseGoogle}\n                cookiePolicy={'single_host_origin'}\n                prompt={'none'}\n            />\n            <script src=\"https://apis.google.com/js/platform.js\" async defer></script>\n            \n            </div>\n            <Image src={this.state.imageUrl} roundedCircle />\n            </div>\n        );\n    }\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Navbar,Nav, Row,Col,Container} from 'react-bootstrap';\nimport LoginPanel from './component/LoginPanel/LoginPanel';\nimport Particles from 'react-particles-js';\n// import Logintbygoogle from './Logintbygoogle'\n// import Dashboard from \"./Dashboard\";\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\n\n\nconst navbar = <Navbar expand=\"md\" className=\"color-nav\">\n<Navbar.Brand href=\"#home\"><svg width=\"44px\" height=\"30px\" viewBox=\"0 0 88 61\" version=\"1.1\" >\n    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n        <path d=\"M0,61 L0,56 L51,56 L51,36 L43,36 L43,31 L51,31 L51,23 L43,23 L43,18 L51,18 L51,0 L56,0 L56,61 L0,61 Z M68,0 L68,51 L83,51 L83,43 L88,43 L88,56 L63,56 L63,0 L68,0 Z M5,41 L5,51 L0,51 L0,41 L5,41 Z M38,41 L38,51 L33,51 L33,41 L38,41 Z M38,18 L38,36 L22,36 L22,51 L17,51 L17,36 L0,36 L0,18 L38,18 Z M79.6066017,17 L83.1421356,20.5355339 L76.106,27.571 L83.1421356,34.6066017 L79.6066017,38.1421356 L72.571,31.106 L72.5355339,31.1421356 L69,27.6066017 L69.035,27.571 L69,27.5355339 L72.5355339,24 L72.57,24.035 L79.6066017,17 Z M33,23 L5,23 L5,31 L33,31 L33,23 Z M22,4 L22,9 L38,9 L38,14 L0,14 L0,9 L17,9 L17,4 L22,4 Z\" id=\"形状结合\" fill=\"#000000\"></path>\n    </g>\n</svg></Navbar.Brand>\n<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n<Navbar.Collapse id=\"basic-navbar-nav\">\n  <Nav className=\"mr-auto\">\n    <Nav.Link href=\"#home\">Home</Nav.Link>\n    <Nav.Link href=\"#home\">Projects</Nav.Link>\n    <Nav.Link href=\"#home\">About</Nav.Link>\n    <Nav.Link href=\"#link\">Github</Nav.Link>\n  </Nav>\n</Navbar.Collapse>\n</Navbar>;\n\n\n\n\n\n\nfunction App() {\n\n  // state getter and setter\n  const [currentUser, setCurrentUser] = useState(0);\n\n  // sample code for requesting resource from server\n  useEffect(() => {\n    fetch('/dummy_login').then(res => res.json()).then(data => {\n      console.log(data);\n    });\n  }, []);\n\n  \n\n  return (\n      \n    \n    <div className=\"App\">\n      \n      {navbar}\n      <Particles className=\"particles-js\"\n        params={{\n          \"particles\": {\n              \"number\": {\n                  \"value\": 50\n              },\n              \"size\": {\n                  \"value\": 3\n              }\n          },\n          \"interactivity\": {\n              \"events\": {\n                  \"onhover\": {\n                      \"enable\": true,\n                      \"mode\": \"repulse\"\n                  }\n              }\n          }\n      }}/>\n      \n\n\n\n      \n\n      <header className=\"App-header\">\n        <Container>\n          <Row className=\"logo-container\">\n              <Col className=\"spin-icon-holder\" md=\"auto\" xs={12}>\n                <svg width=\"50px\" className=\"App-logo\" height=\"50px\" viewBox=\"0 0 50 50\" version=\"1.1\" >\n                    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                        <path d=\"M25,10 C33.2842712,10 40,16.7157288 40,25 C40,33.2842712 33.2842712,40 25,40 C16.7157288,40 10,33.2842712 10,25 C10,16.7157288 16.7157288,10 25,10 Z M25,15 C19.4771525,15 15,19.4771525 15,25 C15,30.5228475 19.4771525,35 25,35 C30.5228475,35 35,30.5228475 35,25 C35,19.4771525 30.5228475,15 25,15 Z\" id=\"形状结合\" fill=\"#000000\"></path>\n                        <path d=\"M25,0 C37.0948241,0 47.1836155,8.58884753 49.4999293,20.0000979 L44.3700885,20.0006836 C42.1501123,11.3742007 34.3194433,5 25,5 C15.6805567,5 7.84988768,11.3742007 5.62991149,20.0006836 L0.500070701,20.0000979 C2.81638453,8.58884753 12.9051759,0 25,0 Z\" id=\"形状结合\" fill=\"#000000\"></path>\n                        <path d=\"M25,29.9993164 C37.0948241,29.9993164 47.1836155,38.5881639 49.4999293,49.9994143 L44.3700885,50 C42.1501123,41.3735171 34.3194433,34.9993164 25,34.9993164 C15.6805567,34.9993164 7.84988768,41.3735171 5.62991149,50 L0.500070701,49.9994143 C2.81638453,38.5881639 12.9051759,29.9993164 25,29.9993164 Z\" id=\"形状结合\" fill=\"#000000\" transform=\"translate(25.000000, 39.999658) scale(1, -1) translate(-25.000000, -39.999658) \"></path>\n                    </g>\n                </svg>\n              </Col>\n              <Col md=\"auto\" xs={12}>\n                <h1 className=\"logotext\">Book Keeper</h1>\n              </Col>\n            </Row>\n        </Container>\n        <LoginPanel/>\n\n\n        \n\n      </header>\n\n\n\n      \n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// testing only\nimport LoginPanel from './component/LoginPanel/LoginPanel';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n\n    {/* testing only */}\n    {/* <AdminPage /> */}\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}